# \tablebot-pipe-advanced\08_core_loop.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import signal
import asyncio
import sys
from pathlib import Path



from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

# –ú–∏–∫—Ä–æ-–∏–º–ø–æ—Ä—Ç—ã
from core.token_loader import load_bot_token
from core.table_loader import load_table
from core.fsm_builder import extract_states_from_table, create_fsm_from_states

# –°—Ç–∞—Ä—ã–π –∏–º–ø–æ—Ä—Ç:
# from core.message_sender import send_message_by_content

# –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç:
from core.message_sender import *

from pipeline import *

from core.commands_loader import extract_commands

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main ---
async def main():
    TABLE_FILE = sys.argv[1] if len(sys.argv) > 1 else "table.csv"
    table_path = Path(TABLE_FILE)
    
    if not table_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {TABLE_FILE}")
        return

    token = load_bot_token()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ FSM
    rows = load_table(TABLE_FILE)
    states_found = extract_states_from_table(rows)
    DynFSM = create_fsm_from_states(states_found)
    print(f"üß† –°–æ–∑–¥–∞–Ω–æ {len(states_found)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    dp = Dispatcher(storage=MemoryStorage())
    bot = Bot(token)
    
    # --- –ù–ê–ß–ê–õ–û: –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é ---
    print("[main] üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...", file=sys.stderr)
    try:
        cmds = extract_commands(TABLE_FILE) # <- –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ core.commands_loader
        if cmds:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–π–¥–µ–Ω—ã
            await bot.set_my_commands(cmds)     # <- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É
            print(f"[main] ‚úÖ –ö–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(cmds)} –∫–æ–º–∞–Ω–¥.", file=sys.stderr)
        else:
            print(f"[main] ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ, –º–µ–Ω—é –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", file=sys.stderr)
    except Exception as e:
        print(f"[main] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
    # --- –ö–û–ù–ï–¶: –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ ---

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    @dp.message(Command("start", "reset"))
    async def start_handler(msg: types.Message, state: FSMContext):
        await state.set_data({"current_state": "start"})
        if msg.text == "/reset":
            await msg.answer("üîÑ –ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω")
        await handle_message(msg, state, table_path, DynFSM, bot)

        
    @dp.message()
    async def message_handler(msg: types.Message, state: FSMContext):
        # --- –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
        if msg.text == "/reload_menu":
            cmds = extract_commands(str(table_path))
            await bot.set_my_commands(cmds)
            await msg.answer("‚úÖ –ú–µ–Ω—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            return   # –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º –ø–æ pipeline
        # --- –æ—Å–Ω–æ–≤–Ω–æ–π pipeline ---
        await handle_message(msg, state, table_path, DynFSM, bot)

    @dp.callback_query()
    async def callback_handler(callback: types.CallbackQuery, state: FSMContext):
        await handle_callback(callback, state, table_path, DynFSM, bot)

    # –ó–∞–ø—É—Å–∫
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    finally:
        print("‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        try:
            await bot.session.close()
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–µ—Å—Å–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞)")



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(msg: types.Message, state: FSMContext, table_path, DynFSM, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pipeline —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        data = await state.get_data()
        current_state = data.get("current_state", "start")
        user_role = data.get("user_role", "client")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        user_input = msg.text
        location_data = None
        
        if msg.location:
            user_input = "<location>"
            location_data = {
                "latitude": msg.location.latitude,
                "longitude": msg.location.longitude
            }
        
        payload = {
            "current_state": current_state, 
            "text": user_input,
            "user_role": user_role,
            "chat_id": msg.chat.id
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º location –≤ payload –µ—Å–ª–∏ –µ—Å—Ç—å
        if location_data:
            payload["location"] = location_data
        
        print(f"üì• –í—Ö–æ–¥: state={current_state!r}, text={payload['text']!r}, role={user_role!r}, location={location_data is not None}")

        # Pipeline –≤—ã–∑–æ–≤–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ä–æ–ª–∏
        row = find_row(table_path, current_state, payload['text'], user_role)
        
        if not row:
            await bot.send_message(msg.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return

        skip = check_guard(row, payload, current_state)
        
        if not skip:
            await execute_effect(row, payload, bot)  # –î–û–ë–ê–í–õ–ï–ù–û: await
        
        message_content = build_message_content(row, payload)
        integration = prepare_integration(row)
        next_state = determine_transition(row, skip)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if message_content:
            await send_message_by_content(bot, msg.chat.id, message_content)
        
        if integration:
            print(f"üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration}")
        
        if next_state and hasattr(DynFSM, next_state):
            await state.set_state(getattr(DynFSM, next_state))
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            new_payload = payload.copy()
            new_payload['current_state'] = next_state
            await state.update_data(**new_payload)
            print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥: {current_state!r} ‚Üí {next_state!r}")
        else:
            await state.update_data(**payload)

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        await bot.send_message(msg.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ ---
async def handle_callback(callback: types.CallbackQuery, state: FSMContext, table_path, DynFSM, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º fake-message –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    fake_message = types.Message(
        message_id=callback.message.message_id,
        from_user=callback.from_user,
        chat=callback.message.chat,  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: callback.message.chat
        date=callback.message.date,
        text=callback.data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data –∫–∞–∫ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await handle_message(fake_message, state, table_path, DynFSM, bot)
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")