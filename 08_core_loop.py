# \tablebot-pipe-advanced\08_core_loop.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import signal
import asyncio
import sys
from pathlib import Path



from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

# –ú–∏–∫—Ä–æ-–∏–º–ø–æ—Ä—Ç—ã
from core.token_loader import load_bot_token
from core.table_loader import load_table
from core.fsm_builder import extract_states_from_table, create_fsm_from_states

# –°—Ç–∞—Ä—ã–π –∏–º–ø–æ—Ä—Ç:
# from core.message_sender import send_message_by_content

# –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç:
from core.message_sender import *

from pipeline import *

from core.commands_loader import extract_commands

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main ---
async def main():
    TABLE_FILE = sys.argv[1] if len(sys.argv) > 1 else "table.csv"
    table_path = Path(TABLE_FILE)
    
    if not table_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {TABLE_FILE}")
        return

    token = load_bot_token()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ FSM
    rows = load_table(TABLE_FILE)
    states_found = extract_states_from_table(rows)
    DynFSM = create_fsm_from_states(states_found)
    print(f"üß† –°–æ–∑–¥–∞–Ω–æ {len(states_found)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    dp = Dispatcher(storage=MemoryStorage())
    bot = Bot(token)
    
    # --- –ù–ê–ß–ê–õ–û: –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é ---
    print("[main] üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...", file=sys.stderr)
    try:
        cmds = extract_commands(TABLE_FILE) # <- –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ core.commands_loader
        if cmds:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–π–¥–µ–Ω—ã
            await bot.set_my_commands(cmds)     # <- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É
            print(f"[main] ‚úÖ –ö–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(cmds)} –∫–æ–º–∞–Ω–¥.", file=sys.stderr)
        else:
            print(f"[main] ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ, –º–µ–Ω—é –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", file=sys.stderr)
    except Exception as e:
        print(f"[main] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
    # --- –ö–û–ù–ï–¶: –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ ---

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    @dp.message(Command("start", "reset"))
    async def start_handler(msg: types.Message, state: FSMContext):
        await state.set_data({"current_state": "start"})
        if msg.text == "/reset":
            await msg.answer("üîÑ –ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω")
        await handle_message(msg, state, table_path, DynFSM, bot)

        
    @dp.message()
    async def message_handler(msg: types.Message, state: FSMContext):
        # --- –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
        if msg.text == "/reload_menu":
            cmds = extract_commands(str(table_path))
            await bot.set_my_commands(cmds)
            await msg.answer("‚úÖ –ú–µ–Ω—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            return   # –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º –ø–æ pipeline
        # --- –æ—Å–Ω–æ–≤–Ω–æ–π pipeline ---
        await handle_message(msg, state, table_path, DynFSM, bot)

    @dp.callback_query()
    async def callback_handler(callback: types.CallbackQuery, state: FSMContext):
        await handle_callback(callback, state, table_path, DynFSM, bot)

    # –ó–∞–ø—É—Å–∫
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    finally:
        print("‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        try:
            await bot.session.close()
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–µ—Å—Å–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞)")



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(msg: types.Message, state: FSMContext, table_path, DynFSM, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pipeline —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        print(f"üéØ [handler] –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø", file=sys.stderr)
        
        # === –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ FSM ===
        print(f"üì• [handler] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ FSM...", file=sys.stderr)
        data = await state.get_data()
        current_state = data.get("current_state", "start")
        user_role = data.get("user_role", "client")
        
        print(f"üìä [handler] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state!r}", file=sys.stderr)
        print(f"üë§ [handler] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role!r}", file=sys.stderr)
        print(f"üóÇÔ∏è [handler] –í—Å–µ –∫–ª—é—á–∏ –≤ FSM: {list(data.keys())}", file=sys.stderr)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        for key in ['address', 'from_address', 'to_address', 'phone', 'location']:
            if key in data:
                print(f"üìã [handler] {key} –≤ FSM: {data[key]!r}", file=sys.stderr)
        
        # === –®–ê–ì 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
        print(f"üì® [handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...", file=sys.stderr)
        
        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø user_input –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏)
        user_input = msg.text or ""
        location_data = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if msg.location:
            print(f"üìç [handler] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è!", file=sys.stderr)
            user_input = "<location>"
            location_data = {
                "latitude": msg.location.latitude,
                "longitude": msg.location.longitude
            }
            print(f"üìç [handler] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_data}", file=sys.stderr)
        
        print(f"üìù [handler] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤–≤–æ–¥: {user_input!r}", file=sys.stderr)
        
        # === –®–ê–ì 3: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ payload ===
        print(f"üîÑ [handler] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ payload...", file=sys.stderr)
        
        # –í–ê–ñ–ù–û: –ö–æ–ø–∏—Ä—É–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –≤ payload —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Ö
        payload = data.copy()
        payload.update({
            "current_state": current_state,
            "text": user_input,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            "user_role": user_role, 
            "chat_id": msg.chat.id
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º location –≤ payload –µ—Å–ª–∏ –µ—Å—Ç—å
        if location_data:
            payload["location"] = location_data
            print(f"üìç [handler] Location –¥–æ–±–∞–≤–ª–µ–Ω –≤ payload", file=sys.stderr)
        
        print(f"üì¶ [handler] Payload —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –ö–ª—é—á–∏: {list(payload.keys())}", file=sys.stderr)
        print(f"üîç [handler] –î–µ—Ç–∞–ª–∏ payload:", file=sys.stderr)
        for key, value in payload.items():
            if key not in ['location']:  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã
                print(f"   {key}: {value!r}", file=sys.stderr)
        
        # === –®–ê–ì 4: –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===
        print(f"‚öôÔ∏è [handler] –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...", file=sys.stderr)
        
        # 4.1 –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        print(f"üîç [handler] –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ...", file=sys.stderr)
        row = find_row(table_path, current_state, payload['text'], user_role)
        
        if not row:
            print(f"‚ùå [handler] –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ", file=sys.stderr)
            await bot.send_message(msg.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return
        
        print(f"‚úÖ [handler] –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: from_state={row.get('from_state')!r} -> to_state={row.get('to_state')!r}", file=sys.stderr)
        
        # 4.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π (guards)
        print(f"üõ°Ô∏è [handler] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π...", file=sys.stderr)
        skip = check_guard(row, payload, current_state)
        print(f"üõ°Ô∏è [handler] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π: skip={skip}", file=sys.stderr)
        
        # 4.3 –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã)
        if not skip:
            print(f"‚ö° [handler] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤...", file=sys.stderr)
            await execute_effect(row, payload, bot)
            print(f"‚úÖ [handler] –≠—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", file=sys.stderr)
        else:
            print(f"‚è≠Ô∏è [handler] –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (skip=True)", file=sys.stderr)
        
        # 4.4 –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"üí¨ [handler] –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...", file=sys.stderr)
        message_content = build_message_content(row, payload)
        if message_content:
            print(f"‚úÖ [handler] –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω: type={message_content.get('type')}", file=sys.stderr)
        else:
            print(f"‚ÑπÔ∏è [handler] –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç–æ–π", file=sys.stderr)
        
        # 4.5 –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        print(f"üîå [handler] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...", file=sys.stderr)
        integration = prepare_integration(row)
        if integration:
            print(f"üîå [handler] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞: {integration}", file=sys.stderr)
        
        # 4.6 –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print(f"üîÑ [handler] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞...", file=sys.stderr)
        next_state = determine_transition(row, skip)
        print(f"üîÑ [handler] –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {next_state!r}", file=sys.stderr)
        
        # === –®–ê–ì 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
        print(f"üì§ [handler] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...", file=sys.stderr)
        if message_content:
            await send_message_by_content(bot, msg.chat.id, message_content)
            print(f"‚úÖ [handler] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", file=sys.stderr)
        
        if integration:
            print(f"üîå [handler] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration}", file=sys.stderr)
        
        # === –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM ===
        print(f"üíæ [handler] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM...", file=sys.stderr)
        
        if next_state and hasattr(DynFSM, next_state):
            await state.set_state(getattr(DynFSM, next_state))
            print(f"‚úÖ [handler] –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {next_state!r}", file=sys.stderr)
        
        # –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ payload –≤ FSM
        new_payload = payload.copy()
        new_payload['current_state'] = next_state if next_state else current_state
        await state.update_data(**new_payload)
        
        print(f"üîÑ [handler] –ü–ï–†–ï–•–û–î –í–´–ü–û–õ–ù–ï–ù: {current_state!r} ‚Üí {next_state!r}", file=sys.stderr)
        print(f"üíæ [handler] –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ FSM: {list(new_payload.keys())}", file=sys.stderr)
        print(f"üéØ [handler] –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û", file=sys.stderr)

    except Exception as e:
        print(f"üí• [handler] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", file=sys.stderr)
        import traceback
        print(f"üí• [handler] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:", file=sys.stderr)
        traceback.print_exc(file=sys.stderr)
        await bot.send_message(msg.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ ---
async def handle_callback(callback: types.CallbackQuery, state: FSMContext, table_path, DynFSM, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º fake-message –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    fake_message = types.Message(
        message_id=callback.message.message_id,
        from_user=callback.from_user,
        chat=callback.message.chat,
        date=callback.message.date,
        text=callback.data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data –∫–∞–∫ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await handle_message(fake_message, state, table_path, DynFSM, bot)
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")