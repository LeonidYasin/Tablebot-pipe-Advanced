# \tablebot-pipe-advanced\core\commands_loader.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import csv
import sys
from pathlib import Path
from aiogram import types

def extract_commands(table_path):
    """–ß–∏—Ç–∞–µ—Ç CSV –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ BotCommand –∏–∑ —Å—Ç—Ä–æ–∫ —Å bot_command –∏ bot_description"""
    rows = []
    try:
        with open(table_path, encoding="utf-8") as f:
            rows = list(csv.DictReader(f))
    except Exception as e:
        print(f"[commands] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_path}: {e}", file=sys.stderr)
        return []

    commands = []
    print(f"[commands] üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ {table_path}", file=sys.stderr)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
    if rows:
        headers = list(rows[0].keys())
        print(f"[commands] üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}", file=sys.stderr)
        print(f"[commands] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(headers)}", file=sys.stderr)

    for i, r in enumerate(rows):
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫, –∞ –Ω–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        cmd = (r.get("bot_command") or "").strip()
        desc = (r.get("bot_description") or "").strip()

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
        if i < 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–æ–∫
            all_columns = {k: v for k, v in r.items() if v.strip()}
            print(f"[commands] üîç –°—Ç—Ä–æ–∫–∞ {i+1} –∑–Ω–∞—á–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {all_columns}", file=sys.stderr)

        if cmd and desc:
            if cmd.startswith('/'):
                clean_cmd = cmd[1:]
                commands.append(types.BotCommand(command=clean_cmd, description=desc))
                print(f"[commands] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /{clean_cmd} -> {desc}", file=sys.stderr)
            else:
                print(f"[commands] ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å bot_command –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å '/': '{cmd}', —Å—Ç—Ä–æ–∫–∞ {i+1}", file=sys.stderr)
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            if cmd and not desc:
                print(f"[commands] ‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ {i+1} –∏–º–µ–µ—Ç bot_command –Ω–æ –Ω–µ—Ç bot_description: '{cmd}'", file=sys.stderr)
            elif desc and not cmd:
                print(f"[commands] ‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ {i+1} –∏–º–µ–µ—Ç bot_description –Ω–æ –Ω–µ—Ç bot_command: '{desc}'", file=sys.stderr)

    print(f"[commands] üìã –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.", file=sys.stderr)
    if commands:
        print(f"[commands] üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: {[f'/{cmd.command} - {cmd.description}' for cmd in commands]}", file=sys.stderr)
    else:
        print(f"[commands] üìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.", file=sys.stderr)

    return commands

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        table_file = sys.argv[1]
        print(f"[commands] –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑: {table_file}")
        cmds = extract_commands(table_file)
        print(f"[commands] –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(cmds)}")
    else:
        print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Ç–∞–±–ª–∏—Ü—ã.")