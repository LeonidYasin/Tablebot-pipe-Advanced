# \tablebot-pipe-advanced\core\message_sender\text_sender.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import sys
from .markup_builder import build_reply_markup, build_inline_markup
from .format_detector import detect_parse_mode

async def send_text_message(bot, chat_id, content):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if not content.get("text") and not content.get("caption"):
        print(f"[text_sender] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∏", file=sys.stderr)
        return None
    
    reply_markup = build_reply_markup(content.get("reply_buttons", ""))
    inline_markup = build_inline_markup(content.get("inline_buttons", ""))
    
     # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏
    if content.get("integrations") == "request_location":
        print(f"[text_sender] üìç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!", file=sys.stderr)
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if content.get("reply_buttons"):
            alt_buttons = [btn.strip() for btn in content.get("reply_buttons", "").split('|') if btn.strip()]
            for btn_text in alt_buttons:
                buttons.append([KeyboardButton(text=btn_text)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö)
        buttons.append([KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)])
        
        markup = ReplyKeyboardMarkup(
            keyboard=buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        print(f"[text_sender] üìç –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", file=sys.stderr)
    else:
    
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–µ
        markup = inline_markup if inline_markup else reply_markup
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å–ª–∏ reply_buttons –ø—É—Å—Ç–æ–µ –∏–ª–∏ "‚Äî"
        if content.get("reply_buttons", "").strip() in ["", "‚Äî"] and not inline_markup:
            from aiogram.types import ReplyKeyboardRemove
            markup = ReplyKeyboardRemove()
            print(f"[text_sender] üóëÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—á–∏—â–µ–Ω–∞", file=sys.stderr)
        else:
            print(f"[text_sender] üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {content.get('reply_buttons')}", file=sys.stderr)
    
    parse_mode = detect_parse_mode(content.get("text", ""))
    
    text_to_send = content.get("text", "") or content.get("caption", "")
    
    print(f"[text_sender] üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: {len(text_to_send)} chars, parse_mode: {parse_mode}", file=sys.stderr)
    print(f"[text_sender] –∏—Ç–æ–≥–æ–≤—ã–π text: {text_to_send!r}", file=sys.stderr)
    print(f"[text_sender] parse_mode: {parse_mode}", file=sys.stderr)
    
    return await bot.send_message(
        chat_id=chat_id,
        text=text_to_send,
        parse_mode=parse_mode,
        reply_markup=markup
    )