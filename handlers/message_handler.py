#!/usr/bin/env python3
# handlers/message_handler.py

# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–æ–¥—É–ª—è pipeline
from pipeline import (
    find_row,
    check_guard,
    execute_effect,
    build_message_content, # –ë—ã–ª–æ notification, —Ç–µ–ø–µ—Ä—å build_message
    prepare_integration,   # –ë—ã–ª–æ integrations, —Ç–µ–ø–µ—Ä—å prepare_integration
    determine_transition   # –ë—ã–ª–æ transition
)
from core.message_sender import send_message_by_content
from aiogram.fsm.context import FSMContext
from aiogram import types
import sys # –î–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

async def handle_message(msg: types.Message, state: FSMContext, table_path, DynFSM, bot): # <-- –î–æ–±–∞–≤–ª–µ–Ω bot
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = await state.get_data()
        current_state = data.get("current_state", "start")

        # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        # –î–æ–±–∞–≤–∏–º chat_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ payload, —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
        payload = {"current_state": current_state, "text": msg.text or "", "chat_id": msg.chat.id}

        print(f"[handler] üì• –°–æ–æ–±—â–µ–Ω–∏–µ: state={current_state!r}, text={payload['text']!r}", file=sys.stderr)

        # --- –ó–ê–ü–£–°–ö –ü–ê–ô–ü–õ–ê–ô–ù–ê –ù–ê–ü–†–Ø–ú–£–Æ ---
        # 1. find_row
        row = find_row(table_path, current_state, payload['text'])

        # 2. check_guard
        skip = check_guard(row, payload, current_state) if row else False

        # 3. execute_effect (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bot)
        if row and not skip:
            execute_effect(row, payload, bot) # <-- –ü–µ—Ä–µ–¥–∞–µ–º bot

        # 4. build_message_content
        message_content = build_message_content(row, payload) if row else None

        # 5. prepare_integration
        integration = prepare_integration(row) if row else None

        # 6. determine_transition
        next_state = determine_transition(row, skip)

        # --- –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ---
        # 7. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_content:
            await send_message_by_content(bot, msg.chat.id, message_content)

        # 8. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç prepare_integration)
        if integration:
            print(f"[handler] üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration}", file=sys.stderr)
            # –í—ã–∑–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ prepare_integration —Ñ–æ—Ä–º–∞—Ç–∞)
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞
            # await run_integration(integration, payload) # <-- –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

        # 9. –ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if next_state and hasattr(DynFSM, next_state):
            await state.set_state(getattr(DynFSM, next_state))
            # –û–±–Ω–æ–≤–ª—è–µ–º current_state –≤ FSM
            await state.update_data(current_state=next_state, **payload) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏ –≤–µ—Å—å payload
            print(f"[handler] üîÑ –ü–µ—Ä–µ—Ö–æ–¥: {current_state!r} ‚Üí {next_state!r}", file=sys.stderr)
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ—Ç, –Ω–æ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ payload (–Ω–∞–ø—Ä–∏–º–µ—Ä, save: –≤ execute_effect),
            # –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π payload
            await state.update_data(**payload)

    except Exception as e:
        print(f"[handler] üí• –û—à–∏–±–∫–∞: {e}", file=sys.stderr)
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")