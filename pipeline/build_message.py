# \tablebot-pipe-advanced\pipeline\build_message.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import sys
from .format_notification import format_notification

def build_message_content(row, payload):
    """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if not row:
        return None

    content = {"type": "text"}

    # --- –ù–ê–ß–ê–õ–û: –õ–æ–≥–∏–∫–∞ –¥–ª—è progress_config ---
    progress_text = ""
    progress_config = row.get("progress_config", "").strip()
    if progress_config:
        print(f"[build_message] üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ progress_config: '{progress_config}'", file=sys.stderr)

        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è progress_config
        parts = progress_config.split('|') # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —á–µ—Ä–µ–∑ |
        current_step = 0
        total_steps = 0
        field_name = ""
        bar_length = 8 # –î–ª–∏–Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

        for part in parts:
            part = part.strip()
            if part == "disabled":
                progress_text = ""
                break # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            elif part.startswith("manual:"):
                # –§–æ—Ä–º–∞—Ç: manual:current/total
                try:
                    current_str, total_str = part[len("manual:"):].split('/')
                    current_step = int(current_str)
                    total_steps = int(total_str)
                    progress_text += f"[–®–∞–≥ {current_step}/{total_steps}] "
                except (ValueError, IndexError):
                    print(f"[build_message] ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç manual –≤ progress_config: '{part}'", file=sys.stderr)
            elif part.startswith("track:"):
                # –§–æ—Ä–º–∞—Ç: track:field_name
                field_name = part[len("track:"):]
                current_val = payload.get(field_name, 0)
                try:
                    current_step = int(current_val) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–µ
                    # total_steps –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ manual, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ payload
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
                    progress_text += f"[–ü—Ä–æ–≥—Ä–µ—Å—Å: {current_step}] "
                except (ValueError, TypeError):
                    print(f"[build_message] ‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è {field_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {current_val}", file=sys.stderr)
            elif part.startswith("bar:"):
                # –§–æ—Ä–º–∞—Ç: bar:field_name
                # –î–ª—è –±–∞—Ä–∞ –Ω—É–∂–µ–Ω current_step –∏ total_steps
                bar_field_name = part[len("bar:"):]
                current_val = payload.get(bar_field_name, 0)
                try:
                    current_step = int(current_val)
                    # total_steps –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–≤–µ—Å—Ç–µ–Ω. –ï–≥–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ manual –∏–ª–∏ –≤ payload
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑ payload –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é/–∏–∑ manual
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å total_steps –∏–∑ payload, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ max_steps
                    total_steps = payload.get("max_steps", 8) # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8
                    # –ï—Å–ª–∏ –≤ manual –±—ã–ª –∑–∞–¥–∞–Ω total, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å total —Å—é–¥–∞
                    # –£–ø—Ä–æ—â–∞–µ–º: –µ—Å–ª–∏ manual –±—ã–ª, –µ–≥–æ total_steps —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –≤—ã—à–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                    # –∏–ª–∏ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ payload –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
                    # –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º payload.get("total_steps_for_bar") –∏–ª–∏ 8
                    total_steps_bar = payload.get("total_steps_for_bar", total_steps if total_steps > 0 else 8)

                    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –±–∞—Ä–∞
                    filled = '‚ñà' * min(current_step, total_steps_bar)
                    empty = '‚ñë' * max(0, total_steps_bar - current_step)
                    bar_str = f"[{filled}{empty}]"
                    progress_text += bar_str
                except (ValueError, TypeError):
                    print(f"[build_message] ‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è {bar_field_name} –¥–ª—è –±–∞—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {current_val}", file=sys.stderr)

        if progress_text:
             print(f"[build_message] ‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: '{progress_text}'", file=sys.stderr)
        else:
             print(f"[build_message] üìâ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è config: '{progress_config}'", file=sys.stderr)
    # --- –ö–û–ù–ï–¶: –õ–æ–≥–∏–∫–∞ –¥–ª—è progress_config ---


    # --- –ù–ê–ß–ê–õ–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ message_text —Å —É—á–µ—Ç–æ–º progress_text ---
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É message_text, –ø–æ—Ç–æ–º notification)
    message_text = ""
    if row.get("message_text") and row["message_text"] != "‚Äî":
        message_text = row["message_text"]
    elif row.get("notification") and row["notification"] != "‚Äî":
        message_text = format_notification(row, payload)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É progress_text (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    if message_text:
        # –í—Å—Ç–∞–≤–ª—è–µ–º progress_text –≤ –Ω–∞—á–∞–ª–æ message_text
        full_message_text = progress_text + message_text
        print(f"[build] message_text –¥–æ fmt: {full_message_text!r}, payload: {payload}", file=sys.stderr)

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º {placeholders} —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
        # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        if "{" in full_message_text:
            for key, value in payload.items():
                placeholder = "{" + key + "}"
                if placeholder in full_message_text:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ HTML parse_mode
                    safe_val = str(value).replace("&", "&amp;").replace("<", "<").replace(">", ">")
                    full_message_text = full_message_text.replace(placeholder, safe_val)
            print(f"[build] –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ: {full_message_text!r}", file=sys.stderr)

        content["text"] = full_message_text # <-- –¢–µ–ø–µ—Ä—å content["text"] —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å, –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç

    # --- –ö–û–ù–ï–¶: –û–±—Ä–∞–±–æ—Ç–∫–∞ message_text —Å —É—á–µ—Ç–æ–º progress_text ---


    # –ü–æ–¥–ø–∏—Å—å –¥–ª—è –º–µ–¥–∏–∞
    if row.get("caption") and row["caption"] != "‚Äî":
        content["caption"] = row["caption"]

    # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
    if row.get("media_file") and row["media_file"] != "‚Äî":
        content["media_file"] = row["media_file"]

        file_ext = row["media_file"].lower()
        # –î–ª—è URL —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –≤ URL
        if any(ext in file_ext for ext in ['.jpg', '.jpeg', '.png', '.gif', '.webp']):
            content["type"] = "photo"
        elif any(ext in file_ext for ext in ['.mp4', '.avi', '.mov', '.mkv']):
            content["type"] = "video"
        elif any(ext in file_ext for ext in ['.pdf', '.doc', '.docx', '.txt']):
            content["type"] = "document"
        elif any(ext in file_ext for ext in ['.mp3', '.wav', '.ogg']):
            content["type"] = "audio"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if row.get("reply_markup") and row["reply_markup"] != "‚Äî":
        content["reply_buttons"] = row["reply_markup"]

    if row.get("inline_markup") and row["inline_markup"] != "‚Äî":
        content["inline_buttons"] = row["inline_markup"]

    # –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ integrations –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if row.get("integrations") and row["integrations"] != "‚Äî":
        content["integrations"] = row["integrations"]
        print(f"[build_message] üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {row['integrations']}", file=sys.stderr)

    # –û–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)
    if row.get("entities") and row["entities"] != "‚Äî" and content.get("type") == "text":
        content["options"] = [opt.strip() for opt in row["entities"].split(',')]
        content["type"] = "poll"

    print(f"[build_message] üé® –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {content['type']}, text: {bool(content.get('text'))}, media: {content.get('media_file')}, integrations: {content.get('integrations', '–Ω–µ—Ç')}", file=sys.stderr)

    return content