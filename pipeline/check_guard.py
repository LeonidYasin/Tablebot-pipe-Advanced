# tablebot-pipe-advanced\pipeline\check_guard.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import sys

def check_guard(row, payload, current_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç guard-—É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞"""
    # –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï - –∏—Å–ø–æ–ª—å–∑—É–µ–º .get() —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    condition = (row.get("condition") or "").strip()
    
    if not condition or condition == "‚Äî":
        return False
    
    print(f"[check_guard] üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: {condition}", file=sys.stderr)
    
    try:
        if condition.startswith('not_empty:'):
            field = condition[10:]
            value = payload.get(field, "")
            if not value or str(value).strip() == "":
                print(f"[check_guard] ‚ùå –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–æ–ª–µ {field} –ø—É—Å—Ç–æ–µ", file=sys.stderr)
                return True
            else:
                print(f"[check_guard] ‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–æ–ª–µ {field} –Ω–µ –ø—É—Å—Ç–æ–µ", file=sys.stderr)
                return False
                
        elif condition.startswith('equals:'):
            # –§–æ—Ä–º–∞—Ç: equals:field:value
            parts = condition[7:].split(':', 1)
            if len(parts) == 2:
                field, expected_value = parts
                actual_value = str(payload.get(field, ""))
                if actual_value != expected_value:
                    print(f"[check_guard] ‚ùå –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {field}={actual_value} != {expected_value}", file=sys.stderr)
                    return True
                else:
                    print(f"[check_guard] ‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {field}={actual_value}", file=sys.stderr)
                    return False
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif condition.startswith('role:'):
            # –§–æ—Ä–º–∞—Ç: role:expected_role
            expected_role = condition[5:]
            user_role = payload.get("user_role", "client")
            if user_role != expected_role:
                print(f"[check_guard] ‚ùå –£—Å–ª–æ–≤–∏–µ —Ä–æ–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: user_role={user_role} != {expected_role}", file=sys.stderr)
                return True
            else:
                print(f"[check_guard] ‚úÖ –£—Å–ª–æ–≤–∏–µ —Ä–æ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: user_role={user_role}", file=sys.stderr)
                return False
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        elif condition.startswith('length>'):
            # –§–æ—Ä–º–∞—Ç: length>min_length:field
            parts = condition[7:].split(':', 1)
            if len(parts) == 2:
                min_length_str, field = parts
                try:
                    min_length = int(min_length_str)
                    text = str(payload.get(field, ""))
                    if len(text) <= min_length:
                        print(f"[check_guard] ‚ùå –£—Å–ª–æ–≤–∏–µ –¥–ª–∏–Ω—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: len({field})={len(text)} <= {min_length}", file=sys.stderr)
                        return True
                    else:
                        print(f"[check_guard] ‚úÖ –£—Å–ª–æ–≤–∏–µ –¥–ª–∏–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: len({field})={len(text)} > {min_length}", file=sys.stderr)
                        return False
                except ValueError:
                    print(f"[check_guard] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏–Ω—ã: {min_length_str}", file=sys.stderr)
                    return True
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è location
        elif condition == 'has_location':
            location = payload.get("location")
            if not location:
                print(f"[check_guard] ‚ùå –£—Å–ª–æ–≤–∏–µ location –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: location –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", file=sys.stderr)
                return True
            else:
                print(f"[check_guard] ‚úÖ –£—Å–ª–æ–≤–∏–µ location –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", file=sys.stderr)
                return False
        
        else:
            print(f"[check_guard] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É—Å–ª–æ–≤–∏—è: {condition}", file=sys.stderr)
            return False
        
    except Exception as e:
        print(f"[check_guard] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: {e}", file=sys.stderr)
        return True
    
    return False