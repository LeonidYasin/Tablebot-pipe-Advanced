# \tablebot-pipe-advanced\pipeline\execute_effect.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import sys
import asyncio

async def reverse_geocode(lat, lon):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é Nominatim"""
    try:
        from geopy.geocoders import Nominatim
        geolocator = Nominatim(user_agent="tablebot_taxi")
        location = await asyncio.to_thread(geolocator.reverse, (lat, lon))
        return location.address if location else "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    except ImportError:
        print("[execute_effect] ‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ geopy: pip install geopy", file=sys.stderr)
        return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"
    except Exception as e:
        print(f"[execute_effect] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", file=sys.stderr)
        return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"

async def execute_effect(row, payload, bot):  # –î–û–ë–ê–í–õ–ï–ù–û: async
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç side-effect –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ result_action"""
    # –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï - –∏—Å–ø–æ–ª—å–∑—É–µ–º .get() —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    result_action = (row.get("result_action") or "").strip()
    
    if not result_action or result_action == "‚Äî":
        print("[execute_effect] ‚èπÔ∏è –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è", file=sys.stderr)
        return
    
    print(f"[execute_effect] üîß –í—ã–ø–æ–ª–Ω—è—é: {result_action}", file=sys.stderr)
    
    # –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã |)
    actions = [a.strip() for a in result_action.split('|') if a.strip()]
    
    for action in actions:
        try:
            if action.startswith('save:'):
                # –§–æ—Ä–º–∞—Ç: save:field_name:value
                parts = action[5:].split(':', 1)
                if len(parts) == 2:
                    field, value_template = parts
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è location
                    if field == "location" and "location" in payload and isinstance(payload["location"], dict):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º location –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        payload[field] = payload["location"]
                        print(f"[execute_effect] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ location –∫–∞–∫ –æ–±—ä–µ–∫—Ç: {payload[field]}", file=sys.stderr)
                    else:
                        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ payload –≤ value_template
                        value = value_template
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {field_name}
                        for key, val in payload.items():
                            placeholder = '{' + key + '}'
                            if placeholder in value:
                                # –î–ª—è location –æ–±—ä–µ–∫—Ç–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                                if key == "location" and isinstance(val, dict):
                                    value = value.replace("{location[latitude]}", str(val.get('latitude', '')))
                                    value = value.replace("{location[longitude]}", str(val.get('longitude', '')))
                                    value = value.replace("{location}", f"{val.get('latitude')}, {val.get('longitude')}")
                                else:
                                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                                    value = value.replace(placeholder, str(val))
                        
                        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–º–µ—â–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Ö –≤ payload
                        if "{" in value:
                            for key, val in payload.items():
                                placeholder = '{' + key + '}'
                                if placeholder in value:
                                    value = value.replace(placeholder, str(val))
                        
                        payload[field] = value
                        print(f"[execute_effect] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {field} = {value}", file=sys.stderr)
            
            elif action.startswith('clear:'):
                # –§–æ—Ä–º–∞—Ç: clear:field_name
                field = action[6:]
                if field in payload:
                    del payload[field]
                    print(f"[execute_effect] üóëÔ∏è –û—á–∏—â–µ–Ω–æ: {field}", file=sys.stderr)
            
            elif action.startswith('notify_user_by_chat_id:'):
                # –§–æ—Ä–º–∞—Ç: notify_user_by_chat_id:target_chat_id:message_template
                parts = action[22:].split(':', 1)
                if len(parts) == 2:
                    target_chat_id_str, message_template = parts
                    try:
                        target_chat_id = int(target_chat_id_str)
                        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
                        message = message_template
                        for key, val in payload.items():
                            placeholder = '{' + key + '}'
                            message = message.replace(placeholder, str(val))
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ bot)
                        if bot:
                            from core.message_sender import send_message_by_content
                            await send_message_by_content(bot, target_chat_id, {"type": "text", "text": message})  # –î–û–ë–ê–í–õ–ï–ù–û: await
                            print(f"[execute_effect] üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_chat_id}", file=sys.stderr)
                    except ValueError:
                        print(f"[execute_effect] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π chat_id: {target_chat_id_str}", file=sys.stderr)
            
            # –í execute_effect.py –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É location
            elif action.startswith('geocode_location'):
                if 'location' in payload:
                    lat = payload['location']['latitude']
                    lon = payload['location']['longitude']
                    # –í—ã–∑–æ–≤ API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                    address = await reverse_geocode(lat, lon)
                    payload['address'] = address
                    print(f"[execute_effect] üó∫Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {lat},{lon} -> {address}", file=sys.stderr)
            
            # –í —Ñ—É–Ω–∫—Ü–∏—é execute_effect –¥–æ–±–∞–≤—å—Ç–µ:
            elif action == 'request_location':
                print(f"[execute_effect] üìç –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", file=sys.stderr)
                # –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–µ–ª–∞–µ—Ç—Å—è –≤ message_sender
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ—Ä–æ–ª–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
            elif action.startswith('notify_operator'):
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                print(f"[execute_effect] üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", file=sys.stderr)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                
            elif action.startswith('notify_executor'):
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                print(f"[execute_effect] üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", file=sys.stderr)
                
            elif action.startswith('notify_client'):
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                print(f"[execute_effect] üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞", file=sys.stderr)
                
            elif action.startswith('assign_executor'):
                # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                print(f"[execute_effect] üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", file=sys.stderr)
                
            elif action.startswith('order_done'):
                # –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
                print(f"[execute_effect] ‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", file=sys.stderr)
                
            elif action.startswith('order_cancelled'):
                # –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
                print(f"[execute_effect] ‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", file=sys.stderr)
            
            elif action == 'geocode_location':
                if 'location' in payload and isinstance(payload['location'], dict):
                    lat = payload['location'].get('latitude')
                    lon = payload['location'].get('longitude')
                    if lat and lon:
                        address = await reverse_geocode(lat, lon)
                        payload['address'] = address
                        payload['from_address'] = address
                        print(f"[execute_effect] üó∫Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {lat},{lon} -> {address}", file=sys.stderr)
            
            
            
            else:
                print(f"[execute_effect] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}", file=sys.stderr)
                
        except Exception as e:
            print(f"[execute_effect] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action}: {e}", file=sys.stderr)
           
           
