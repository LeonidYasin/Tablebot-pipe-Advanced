# \tablebot-pipe-advanced\pipeline\find_row.py
# Copyright (C) 2025 Leonid Yasin
# This file is part of Tablebot-pipe-Advanced and is licensed under the GNU GPL v3.0.
# See the LICENSE file for details.
#!/usr/bin/env python3
import csv
import sys
from pathlib import Path

def find_row(table_path, current_state, user_input, user_role=None):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–≤–æ–¥–∞"""
    try:
        with open(table_path, encoding="utf-8") as f:
            rows = list(csv.DictReader(f))
    except Exception as e:
        print(f"[find_row] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}", file=sys.stderr)
        return None

    print(f"[find_row] üîç –ü–æ–∏—Å–∫: state={current_state!r}, text={user_input!r}, role={user_role!r}", file=sys.stderr)

    matching_rows = []
    
    for i, row in enumerate(rows):
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–æ –∏–º–µ–Ω–∞–º
        from_state = (row.get("from_state") or "").strip()
        command = (row.get("command") or "").strip()
        role = (row.get("role") or "").strip()
        condition = (row.get("condition") or "").strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        if not from_state or not command:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if from_state != current_state and from_state != "any":
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–ª–∏ (–µ—Å–ª–∏ —Ä–æ–ª—å —É–∫–∞–∑–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
        if role and user_role and role != user_role and role != "any":
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if command == user_input or command == "<text>" or command == "<location>":
            matching_rows.append((i + 2, row))  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ: 0-based index + 1 —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ + 1 –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            print(f"[find_row] ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ {i+2}, state={from_state!r}, command={command!r}, role={role!r} -> {row.get('to_state', 'N/A')!r}", file=sys.stderr)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
    if len(matching_rows) > 1:
        print(f"[find_row] ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ! –ù–∞–π–¥–µ–Ω–æ {len(matching_rows)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–æ–∫:", file=sys.stderr)
        for line_num, row in matching_rows:
            print(f"[find_row] ‚ö†Ô∏è   - –°—Ç—Ä–æ–∫–∞ {line_num}: from_state={row.get('from_state')!r}, command={row.get('command')!r}, to_state={row.get('to_state')!r}", file=sys.stderr)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ)
        selected_line, selected_row = matching_rows[0]
        print(f"[find_row] ‚ö†Ô∏è  –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {selected_line} (–ø–µ—Ä–≤–∞—è –≤ —Ç–∞–±–ª–∏—Ü–µ)", file=sys.stderr)
        print(f"[find_row] ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä: state={selected_row.get('from_state')!r}, command={selected_row.get('command')!r} -> {selected_row.get('to_state', 'N/A')!r}", file=sys.stderr)
        return selected_row
    
    elif len(matching_rows) == 1:
        line_num, row = matching_rows[0]
        print(f"[find_row] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–¥–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–æ–∫–∞ {line_num}: state={row.get('from_state')!r}, command={row.get('command')!r} -> {row.get('to_state', 'N/A')!r}", file=sys.stderr)
        return row
    else:
        print(f"[find_row] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–æ–∫", file=sys.stderr)
        return None