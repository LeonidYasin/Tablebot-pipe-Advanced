import os
import argparse
from pathlib import Path
from datetime import datetime
import humanize

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_EXTENSIONS = ['.py', '.md', '.txt', '.csv']
EXCLUDED_FILES = ['project_overview.txt', '.gitignore', 'temp.txt']

def get_output_filename(base_name="project_overview"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{base_name}_{timestamp}.txt"

def is_excluded_output_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏—Ç–æ–≥–æ–≤—ã–º –æ—Ç—á–µ—Ç–æ–º."""
    return (filename.startswith("project_overview_") and 
            filename.endswith(".txt") and
            len(filename) > len("project_overview_XXXXXX.txt"))

def should_include_file(file_path, included_extensions):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª –≤ –∞–Ω–∞–ª–∏–∑."""
    file_path = Path(file_path)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    if any(part.startswith('.') for part in file_path.parts):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if file_path.name in EXCLUDED_FILES:
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
    if is_excluded_output_file(file_path.name):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if file_path.suffix.lower() not in included_extensions:
        return False
    
    return True

def get_file_info(file_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ (—Ä–∞–∑–º–µ—Ä, –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)."""
    try:
        stat = file_path.stat()
        return {
            'size': stat.st_size,
            'mtime': stat.st_mtime,
            'size_str': humanize.naturalsize(stat.st_size),
            'mtime_str': datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M')
        }
    except OSError:
        return None

def read_file_content(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫–æ–Ω—Ü–µ
            if content and not content.endswith('\n'):
                content += '\n'
            return content
    except UnicodeDecodeError:
        return "!!! –ù–ï–í–û–ó–ú–û–ñ–ù–û –ü–†–û–ß–ò–¢–ê–¢–¨ (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)\n"
    except Exception as e:
        return f"!!! –û–®–ò–ë–ö–ê –ü–†–ò –ß–¢–ï–ù–ò–ò: {e}\n"

def get_directory_tree(project_path, included_extensions):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
    project_path = Path(project_path)
    tree_lines = []
    file_count = 0

    def build_tree(directory, prefix=""):
        nonlocal file_count
        contents = []
        try:
            contents = sorted(os.listdir(directory))
        except PermissionError:
            return [f"{prefix}‚îî‚îÄ‚îÄ ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"]

        files = []
        dirs = []

        for item in contents:
            item_path = directory / item
            if item_path.is_dir():
                if not item.startswith('.'):  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏
                    dirs.append(item)
            else:
                if should_include_file(item_path, included_extensions):
                    files.append(item)

        # –°–Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª—ã, –ø–æ—Ç–æ–º –ø–∞–ø–∫–∏
        items = files + dirs
        tree = []

        for i, item in enumerate(items):
            is_last = i == len(items) - 1
            item_path = directory / item

            if item_path.is_file():
                # –≠—Ç–æ —Ñ–∞–π–ª
                file_count += 1
                file_info = get_file_info(item_path)
                if file_info:
                    tree.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}üìÑ {item} ({file_info['size_str']})")
                else:
                    tree.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}üìÑ {item} (‚ö†Ô∏è)")
            else:
                # –≠—Ç–æ –ø–∞–ø–∫–∞
                tree.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}üìÅ {item}/")
                extension = "    " if is_last else "‚îÇ   "
                tree.extend(build_tree(item_path, prefix + extension))

        return tree

    tree_lines.append("üå≥ –î–†–ï–í–û–í–ò–î–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
    tree_lines.append(".")
    tree_lines.extend(build_tree(project_path))
    tree_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    return tree_lines, file_count

def calculate_project_stats(project_path, included_extensions):
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É."""
    project_path = Path(project_path)
    stats = {
        'total_files': 0,
        'total_folders': 0,
        'files_by_extension': {},
        'files_by_folder': {},
        'total_size': 0,
        'largest_file': {'path': None, 'size': 0},
        'oldest_file': {'path': None, 'mtime': float('inf')},
        'newest_file': {'path': None, 'mtime': 0},
        'folder_structure': {}
    }

    for root, dirs, files in os.walk(project_path):
        # –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        dirs[:] = [d for d in dirs if not d.startswith('.')]

        current_folder = Path(root).relative_to(project_path)
        stats['total_folders'] += 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ
        folder_files_count = 0
        folder_size = 0

        for file in files:
            file_path = Path(root) / file
            
            if not should_include_file(file_path, included_extensions):
                continue

            file_info = get_file_info(file_path)
            if not file_info:
                continue

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats['total_files'] += 1
            stats['total_size'] += file_info['size']

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
            ext = file_path.suffix.lower()
            stats['files_by_extension'][ext] = stats['files_by_extension'].get(ext, 0) + 1

            # –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
            if file_info['size'] > stats['largest_file']['size']:
                stats['largest_file'] = {'path': file_path.relative_to(project_path), 'size': file_info['size']}

            # –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            if file_info['mtime'] < stats['oldest_file']['mtime']:
                stats['oldest_file'] = {'path': file_path.relative_to(project_path), 'mtime': file_info['mtime']}
            if file_info['mtime'] > stats['newest_file']['mtime']:
                stats['newest_file'] = {'path': file_path.relative_to(project_path), 'mtime': file_info['mtime']}

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º
            folder_files_count += 1
            folder_size += file_info['size']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        if current_folder != Path('.'):
            stats['files_by_folder'][str(current_folder)] = {
                'file_count': folder_files_count,
                'total_size': folder_size
            }

    return stats

def format_stats_table(stats, project_path, tree_lines):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ —á–∏—Ç–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü."""
    lines = []
    lines.append("=" * 80)
    lines.append("–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê")
    lines.append("=" * 80)
    lines.append(f"–ü—Ä–æ–µ–∫—Ç: {project_path.name}")
    lines.append(f"–ü—É—Ç—å: {project_path.absolute()}")
    lines.append(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    lines.append(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {humanize.naturalsize(stats['total_size'])}")
    lines.append(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
    lines.append(f"–í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {stats['total_folders']}")
    lines.append("")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    lines.extend(tree_lines)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤
    if stats['files_by_extension']:
        lines.append("üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Ø–ú:")
        lines.append("-" * 40)
        for ext, count in sorted(stats['files_by_extension'].items(), key=lambda x: x[1], reverse=True):
            lines.append(f"{ext:8} : {count:4d} —Ñ–∞–π–ª–æ–≤")
        lines.append("")

    # –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ñ–∞–π–ª—ã
    if stats['largest_file']['path']:
        lines.append("üèÜ –°–ê–ú–´–ï –ë–û–õ–¨–®–ò–ï –§–ê–ô–õ–´:")
        lines.append("-" * 40)
        lines.append(f"–ö—Ä—É–ø–Ω–µ–π—à–∏–π: {stats['largest_file']['path']} ({humanize.naturalsize(stats['largest_file']['size'])})")
        lines.append("")

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    if stats['oldest_file']['path']:
        lines.append("üïê –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò:")
        lines.append("-" * 40)
        oldest_time = datetime.fromtimestamp(stats['oldest_file']['mtime'])
        newest_time = datetime.fromtimestamp(stats['newest_file']['mtime'])
        lines.append(f"–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π: {stats['oldest_file']['path']} ({oldest_time.strftime('%Y-%m-%d')})")
        lines.append(f"–°–∞–º—ã–π –Ω–æ–≤—ã–π:  {stats['newest_file']['path']} ({newest_time.strftime('%Y-%m-%d')})")
        lines.append("")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º (—Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏)
    if stats['files_by_folder']:
        lines.append("üìÇ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–ê–ü–ö–ê–ú:")
        lines.append("-" * 40)
        sorted_folders = sorted(stats['files_by_folder'].items(),
                               key=lambda x: x[1]['file_count'], reverse=True)

        for folder, data in sorted_folders:
            if data['file_count'] > 0:
                size_str = humanize.naturalsize(data['total_size'])
                lines.append(f"{folder:<30} : {data['file_count']:3d} —Ñ–∞–π–ª–æ–≤, {size_str:>10}")
        lines.append("")

    lines.append("=" * 80)
    lines.append("")
    return "\n".join(lines)

def create_project_overview(project_path, output_file=None, included_extensions=None):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º –∫–æ–¥–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã."""
    if included_extensions is None:
        included_extensions = DEFAULT_EXTENSIONS
        
    if output_file is None:
        output_file = get_output_filename()

    project_path = Path(project_path)
    output_file = Path(output_file)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if not project_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ '{project_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False
    if not project_path.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: '{project_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π!")
        return False

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("üå≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    tree_lines, tree_file_count = get_directory_tree(project_path, included_extensions)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\n".join(tree_lines))
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {tree_file_count}")
    print("-" * 50)

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –°–±–æ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats = calculate_project_stats(project_path, included_extensions)

    separator = "\n" + "=" * 80 + "\n"
    file_separator = "\n" + "-" * 60 + "\n"

    try:
        with open(output_file, 'w', encoding='utf-8') as outfile:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_text = format_stats_table(stats, project_path, tree_lines)
            outfile.write(stats_text)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            outfile.write("–°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
            outfile.write(separator)

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            files_processed = 0
            for file_path in project_path.rglob('*'):
                if (file_path.is_file() and 
                    should_include_file(file_path, included_extensions)):

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
                    relative_path = file_path.relative_to(project_path)
                    file_info = get_file_info(file_path)
                    
                    outfile.write(f"–§–ê–ô–õ: {relative_path}\n")
                    if file_info:
                        outfile.write(f"–†–∞–∑–º–µ—Ä: {file_info['size_str']}\n")
                        outfile.write(f"–ò–∑–º–µ–Ω–µ–Ω: {file_info['mtime_str']}\n")
                    else:
                        outfile.write("–†–∞–∑–º–µ—Ä: N/A\n")
                        outfile.write("–ò–∑–º–µ–Ω–µ–Ω: N/A\n")
                    outfile.write(file_separator)

                    # –ß–∏—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    content = read_file_content(file_path)
                    outfile.write(content)

                    outfile.write(separator)
                    files_processed += 1

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            outfile.write(f"–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù.\n")
            outfile.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_processed}\n")
            outfile.write(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {humanize.naturalsize(stats['total_size'])}\n")
            outfile.write(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

        print(f"‚úÖ –û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: {output_file.absolute()}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {humanize.naturalsize(output_file.stat().st_size)}")
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_processed}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    try:
        import humanize
    except ImportError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ 'humanize'")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install humanize")
        return

    parser = argparse.ArgumentParser(
        description='–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞',
        epilog='–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
               '  python project_analyzer.py                 # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏\n'
               '  python project_analyzer.py /–ø—É—Ç—å/–∫/–ø—Ä–æ–µ–∫—Ç—É # –ê–Ω–∞–ª–∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏\n'
               '  python project_analyzer.py -e .py .json .txt -o –æ—Ç—á–µ—Ç.txt',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument('project_path', nargs='?', default='.',
                       help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)')
    parser.add_argument('-o', '--output', 
                       help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π)')
    parser.add_argument('-e', '--extensions', nargs='+', default=DEFAULT_EXTENSIONS,
                       help='–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .py .md .txt)')

    args = parser.parse_args()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if args.output is None:
        args.output = get_output_filename()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É)
    project_path = Path(args.project_path).absolute()

    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    print(f"üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
    print(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")
    print(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–∏—è: {', '.join(args.extensions)}")
    print("-" * 50)

    success = create_project_overview(
        project_path=project_path,
        output_file=args.output,
        included_extensions=args.extensions
    )

    if success:
        print("‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.")
    else:
        print("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.")

if __name__ == "__main__":
    main()